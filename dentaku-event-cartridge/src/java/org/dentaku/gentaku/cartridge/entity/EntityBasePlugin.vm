/**
 * $dontedit
 */
package ${metadata.packageName};

#set ($superclass = $metadata.javaGeneralization)

/**
#if ($superclass)
  * @hibernate.subclass discriminator-value="${metadata.name}"
#else
  * @hibernate.class table="${metadata.name}"
#end
  */
public abstract class ${class.name}Base
#if($superclass)
        extends $superclass.name
#else
        extends org.dentaku.services.persistence.Entity
#end
        implements org.dentaku.services.persistence.XMLBean, java.io.Serializable {

    public ${class.name}Base() { }

#foreach ( $op in $class.operations)
#if ($op.name == $class.name && $op.parameter.size() != 0)
    public ${class.name}Base(${op.signature}) {
#foreach ( $param in $op.parameter )
#if ( !$param.isReturnParam() )
        set${plugin.upperCaseFirstLetter(${param.name})}(${param.name});
#end
#end
    }
#end
#end

    public void getXML(org.dom4j.Element el) throws org.dentaku.services.exception.XMLBeanException {
        try {
            org.dom4j.Element beanElement = el.addElement("${class.name}");
#foreach ( $att in $class.attributes )
            org.dentaku.services.persistence.XMLUtil.addChild(beanElement, "${att.name}", org.apache.commons.beanutils.BeanUtils.getSimpleProperty(this, "${att.name}"));
#end
        } catch (Exception e) {
            throw new org.dentaku.services.exception.XMLBeanException("error creating DOM", e);
        }
    }

    public void setXML(org.dom4j.Element el) throws org.dentaku.services.exception.XMLBeanException {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    // --------------- attributes ---------------------
#foreach ( $att in $class.attributes )
#set ($atttypename = $att.type.fullyQualifiedName)
#set ($worktypename = $atttypename)
    protected $atttypename ${att.name};

   /**
    *
#if ($plugin.matchesStereotype($att, "PrimaryKey"))
    * @hibernate.id generator-class="native"
#set ($worktypename = "Object")
#else
    * @hibernate.property
#end
    *     column="$att.databaseColumnName"
    * @hibernate.column name="$att.databaseColumnName" sql-type="$att.attributeSQLType"
    */
    public $worktypename get${plugin.upperCaseFirstLetter(${att.name})}()
    {
        return this.${att.name};
    }

    public void set${plugin.upperCaseFirstLetter(${att.name})}($worktypename newValue)
    {
#if ($worktypename != $atttypename )
        this.${att.name} = ($atttypename)newValue;
#else
        this.${att.name} = newValue;
#end
    }


#end

    // ------------- relations ------------------

#set ($sep = "_")
#set ($suffix = "_FK")
#foreach ( $assoc in $class.associationLinks )
#set ($foreignKeyColumn = "")
    #if ($plugin.matchesStereotype($assoc, "EagerLoading"))
      #set ($lazy = "false")
    #else
      #set ($lazy = "true")
    #end
    #set ($sourcetype = $assoc.source.participant)
    #set ($targettype = $assoc.target.participant)
    #set ($targettypename = $targettype.fullyQualifiedName)
#if ($assoc.target.navigable == true)
   /**
    * source navigable: $assoc.source.navigable
    * target navigable: $assoc.target.navigable
    *
#if ($assoc.isOne2Many())
#set ( $order = "" )
#set ( $tgv = "" )
#set ( $foreignKeyColumn = "" )
#foreach ( $tgv in $assoc.target.taggedValues )
#if ($tgv.tag == "gentaku.persistence.SQLFKColumnName")
#set ( $foreignKeyColumn = $tgv.value )
#elseif ($tgv.tag == "gentaku.persistence.HibernateInverse")
#set ( $inverse = $tgv.value )
#elseif ($tgv.tag == "gentaku.persistence.order-by")
#set ( $order = $tgv.value )
#end
#end
#if ( $foreignKeyColumn == "" )
#set($foreignKeyColumn = "${plugin.toDatabaseAttributeName(${assoc.source.roleName}, $sep)}$suffix")
#end
    * @hibernate.set lazy="$lazy"
#if ($inverse)
                inverse="$inverse"
#end
#if ($order != "")
                order-by="$order"
#end
    * @hibernate.key column="$foreignKeyColumn"
    * @hibernate.one-to-many class="$targettypename"
    */
    public java.util.Collection get${plugin.upperCaseFirstLetter($assoc.target.roleName)}()
    {
        return (this.${assoc.target.roleName});
    }

    public void set${plugin.upperCaseFirstLetter($assoc.target.roleName)}(java.util.Collection ${assoc.target.roleName})
    {
        this.${assoc.target.roleName} = ${assoc.target.roleName};
    }

    private java.util.Collection ${assoc.target.roleName};

#end
#if ($assoc.isMany2Many())
##
#set ($sourceKeyAtt  = $plugin.upperCaseFirstLetter(${transform.getPrimaryKeyAttribute($sourcetype).name}))
#set ($sourceColumn  = "${assoc.source.roleName}$sourceKeyAtt")
#set ($sourceColumn  = ${plugin.toDatabaseAttributeName($sourceColumn, $sep)})
##
#set ($targetKeyAtt  = $plugin.upperCaseFirstLetter(${transform.getPrimaryKeyAttribute($targettype).name}))
#set ($targetColumn  = "${assoc.target.roleName}$targetKeyAtt")
#set ($targetColumn  = ${plugin.toDatabaseAttributeName($targetColumn, $sep)})
##
#set ($joinTableName = ${plugin.toRelationName($sourceColumn, $targetColumn, $sep)})
##
    * @hibernate.set lazy="$lazy" table="${joinTableName}"
    * @hibernate.key column="$sourceColumn"
    * @hibernate.many-to-many column="$targetColumn" class="$targettypename"
    */
    public java.util.Collection get${plugin.upperCaseFirstLetter($assoc.target.roleName)}()
    {
        return (this.${assoc.target.roleName});
    }

    public void set${plugin.upperCaseFirstLetter($assoc.target.roleName)}(java.util.Collection ${assoc.target.roleName})
    {
        this.${assoc.target.roleName} = ${assoc.target.roleName};
    }

    private java.util.Collection ${assoc.target.roleName};

#end
#if ($assoc.isOne2One() || $assoc.isMany2One())
#if ($assoc.isMany2One())
    *   @hibernate.many-to-one
#elseif ($assoc.isOne2One())
    *   @hibernate.one-to-one
#end
#foreach ( $tgv in $assoc.source.taggedValues )
#if ($tgv.tag == "gentaku.persistence.SQLFKColumnName")
#set ( $foreignKeyColumn = $tgv.value )
#elseif ($tgv.tag == "gentaku.persistence.HibernateInverse")
#set ( $inverse = $tgv.value )
#end
#end
#if ( $foreignKeyColumn == "" )
#set($foreignKeyColumn = "${plugin.toDatabaseAttributeName(${assoc.target.roleName}, $sep)}$suffix")
#end
#if ($assoc.isMany2One())
    *       column="${foreignKeyColumn}"
#end
    */
    public ${targettypename} get${plugin.upperCaseFirstLetter($assoc.target.roleName)}()
    {
        return this.${assoc.target.roleName};
    }

    public void set${plugin.upperCaseFirstLetter($assoc.target.roleName)}(${targettypename} ${assoc.target.roleName})
    {
        this.${assoc.target.roleName} = ${assoc.target.roleName};
    }

    private ${targettypename} ${assoc.target.roleName};

#end


#end
#end

    // ---------------- business methods  ----------------------

#foreach ( $op in $class.operations)
#if ($class.name != $op.name && !$plugin.matchesStereotype($op, "FinderMethod") && !$plugin.matchesStereotype($op, "FilterMethod"))
   /**
    *
    */
#set ($msig = ${op.signature})
#set ($returntype = $op.returnType.fullyQualifiedName)
#if ($defaultException)
    $op.visibilityName abstract $returntype ${op.name}($msig)
        throws $defaultException;
#else
    $op.visibilityName abstract $returntype ${op.name}($msig);
#end
#end
#end

    // ---------------- test methods  ----------------------
    // test methods, should go away (don't put test code in production classes :-)
    private static ${class.name} zeroObject;
    private static ${class.name} oneObject;
    private static java.util.List oneCollection;
    private static java.util.List manyObject;

    public static Object getTestClassZero() {
        if (zeroObject == null) {
            zeroObject = new ${class.name}();
            zeroObject.setId(new Long(0));
            // attributes
#foreach ( $att in $class.attributes )
#set ($atttypename = $att.type.fullyQualifiedName)
#set ($attname =  ${plugin.fromDatabaseAttributeName(${att.name}, "_")})
#if ( $atttypename == "java.lang.String" && !${plugin.matchesStereotype($att.id, "PrimaryKey")} )
            zeroObject.set${plugin.upperCaseFirstLetter(${attname})}("${att.name}");
#elseif ($atttypename == "java.math.BigDecimal" && !$plugin.matchesStereotype($att.id, "PrimaryKey"))
            zeroObject.set${plugin.upperCaseFirstLetter(${attname})}(new java.math.BigDecimal(0));
#end
#end
            // relations
#foreach ( $assoc in $class.associationLinks )
#if ($assoc.target.navigable == true)
#set ($targettype = $assoc.target.type)
#set ($targettypename = $targettype.fullyQualifiedName)
#if ($assoc.isOne2Many())
#set ($attname =  ${plugin.fromDatabaseAttributeName(${assoc.target.roleName}, "_")})
            zeroObject.set${plugin.upperCaseFirstLetter($attname)}(new java.util.ArrayList(0));
#end
#end
#end

        }
        return zeroObject;
    }

#macro( body $obj $meth)
            // attributes
#foreach ( $att in $class.attributes )
#set ($atttypename = $att.type.fullyQualifiedName)
#set ($attname =  ${plugin.fromDatabaseAttributeName(${att.name}, "_")})
#if ( $atttypename == "java.lang.String" && !$plugin.matchesStereotype($att.id, "PrimaryKey"))
            ${obj}.set${plugin.upperCaseFirstLetter(${attname})}("${att.name}");
#elseif ($atttypename == "java.math.BigDecimal" && !$plugin.matchesStereotype($att.id, "PrimaryKey"))
            ${obj}.set${plugin.upperCaseFirstLetter(${attname})}(new java.math.BigDecimal(0));
#end
#end
            // relations
#foreach ( $assoc in $class.associationLinks )
#if ($assoc.target.navigable == true)
#set ($targettypename = $assoc.target.participant.fullyQualifiedName)
#set ($attname =  ${plugin.fromDatabaseAttributeName(${assoc.target.roleName}, "_")})
#set ($foo = $assoc.isClass())
#if ($assoc.isOne2Many())
            ${obj}.set${plugin.upperCaseFirstLetter($attname)}(${targettypename}.${meth}());
#elseif ($assoc.isOne2One() || $assoc.isMany2One())
            ${obj}.set${plugin.upperCaseFirstLetter($attname)}((${targettypename})${targettypename}.getTestClassOne());
#end
#end
#end
#end

    public static Object getTestClassOne() {
        if (oneObject == null) {
            oneObject = new ${class.name}();
            oneObject.setId(new Long(1));
#body("oneObject" "getTestClassOneCollection")
        }
        return oneObject;
    }

    public static java.util.List getTestClassOneCollection() {
        if (oneCollection == null) {
            oneCollection = new java.util.ArrayList(1);
            oneCollection.add(getTestClassOne());
        }
        return oneCollection;
    }

    public static java.util.List getTestClassMany() {
        if (manyObject == null) {
            manyObject = new java.util.ArrayList(getTestCollectionSize());
            manyObject.add(getTestClassZero());
            manyObject.add(getTestClassOne());
            for (int i = 2; i < getTestCollectionSize(); i++) {
                ${class.name} obj = new ${class.name}();
                obj.setId(new Long(i));
#body("obj" "getTestClassMany")
                manyObject.add(obj);
            }
        }
        return manyObject;
    }

    public static int getTestCollectionSize() {
        return ${class.name}.class.hashCode() % 100;
    }

}
