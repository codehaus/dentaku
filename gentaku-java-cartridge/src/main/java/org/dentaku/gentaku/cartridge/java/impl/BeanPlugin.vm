//
// Attention: Generated code! Do not modify by hand!
// Generated by Gentaku Java Cartridge. 
//
// See: http://dentaku.codehaus.org/gentaku
//


package ${class.packageName};

public class ${plugin.getDestinationClassname($class)} implements ${plugin.getInterfaceFullname($class)} {


## Atributtes
#foreach( $att in $class.attributes )

	#if ( $att.isOne() )
		#if( $att.ownerScope == $SK_CLASSIFIER )
			##	If an attribute, in an interface, is static its in fact a constant.
			## does not matter if its public or not.
			public static final $att.type.fullyQualifiedName $att.name = $att.initialValue.body ;
		#else
			## Just private fields (which means property) are generated.
			#if( $att.visibility == $VK_PRIVATE )

				#if( $att.initialValue.body )
					private $att.type.fullyQualifiedName $att.name = $att.initialValue.body;
				#else
					private $att.type.fullyQualifiedName $att.name;
				#end

				#if ( ( $att.changeability == $CK_CHANGEABLE ) || ( $att.changeability == $CK_FROZEN ) )
					public $att.type.fullyQualifiedName get${plugin.upperCaseFirstLetter($att.name)}() { return this.$att.name }
				#end
				
				#if ( ( $att.changeability == $CK_CHANGEABLE ) || ( $att.changeability == $CK_ADD_ONLY ) )
					public void set${plugin.upperCaseFirstLetter($att.name)}($att.type.fullyQualifiedName value) { this.$att.name = value; }
				#end
			#end
		#end
	#else
		## anything to many
		#set( $isItArray = false )
		#if ( $jmiHelper.getTaggedSingleValue( $att, "collectionClass" ) != "" )
			## Custom Collection
			#set( $type = $jmiHelper.getTaggedSingleValue( $att, "collectionClass" ) )
		#elseif ( $jmiHelper.getTaggedSingleValue( $att, "isArray" ) == "true" )
			## Is it array?
			#set( $isItArray = true )
		#elseif ( $att.ordering == $OK_ORDERED )
			## Ordered collection
			#set( $type = "java.util.List" )
		#else
			## Just collection
			#set( $type = "java.util.Collection" )
		#end
		
		#if( $att.ownerScope == $SK_CLASSIFIER )
			##	If an attribute, in an interface, is static its in fact a constant.
			## does not matter if its public or not.
			public static final $type $att.name = $att.initialValue.body ;
		#else
			## Just private fields (which means property) are generated.
			#if( $att.visibility == $VK_PRIVATE )

				#if( $isItArray )
					#if( $att.initialValue.body == "" )
						private $att.type.fullyQualifiedName[] $att.name;
					#else
						private $att.type.fullyQualifiedName[] $att.name = $att.initialValue.body;
					#end

					## Yes, it is an array.
					#if ( ( $att.changeability == $CK_CHANGEABLE ) || ( $att.changeability == $CK_FROZEN ) )
						public $att.type.fullyQualifiedName get${plugin.upperCaseFirstLetter($att.name)}() { return this.$att.name; }
					#end
					
					#if ( ( $att.changeability == $CK_CHANGEABLE ) || ( $att.changeability == $CK_ADD_ONLY ) )
						public void set${plugin.upperCaseFirstLetter($att.name)}($att.type.fullyQualifiedName value) { this.$att.name = value; }
					#end
				#else
					## Its not an array

					#if( $att.initialValue.body == "" )
						private $type $att.name;
					#else
						private $type $att.name = $att.initialValue.body;
					#end

					public $type get${plugin.upperCaseFirstLetter($att.name)}() { return this.$arr.name; }
				#end
			#end
		#end
	#end
#end

## Associations
#foreach( $ass in $class.targetEnds )

	#if( $ass.isNavigable() )
		## Anything to One
		#if( $ass.targetScope == 	$SK_INSTANCE )
			## Just private fields (which means property) are generated.
			#if( $ass.visibility == $VK_PRIVATE )
				#if ( $ass.isOne2One() || $ass.isOne2Many() )
					## anything to one
					#if ( ( $ass.changeability == $CK_CHANGEABLE ) || ( $ass.changeability == $CK_FROZEN ) )
						public $ass.participant.fullyQualifiedName get${plugin.upperCaseFirstLetter($ass.name)}();
					#end
					
					#if ( ( $ass.changeability == $CK_CHANGEABLE ) || ( $ass.changeability == $CK_ADD_ONLY ) )
						public void set${plugin.upperCaseFirstLetter($ass.name)}($ass.participant.fullyQualifiedName value);
					#end
				#else
					## anything to many
					#if ( $jmiHelper.getTaggedSingleValue( $ass, "collectionClass" ) != "" )
						## Custom Collection
						public $jmiHelper.getTaggedSingleValue( $ass, "collectionClass" ) get${plugin.upperCaseFirstLetter($ass.name)}();
					#elseif ( $jmiHelper.getTaggedSingleValue( $ass, "isArray" ) == "true" )
						## Is it array?
						#if ( ( $ass.changeability == $CK_CHANGEABLE ) || ( $ass.changeability == $CK_FROZEN ) )
							public ${ass.participant.fullyQualifiedName}[] get${plugin.upperCaseFirstLetter($ass.name)}();
						#end
						
						#if ( ( $ass.changeability == $CK_CHANGEABLE ) || ( $ass.changeability == $CK_ADD_ONLY ) )
							public void set${plugin.upperCaseFirstLetter($ass.name)}(${ass.participant.fullyQualifiedName}[] value);
						#end
					#elseif ( $ass.ordering == $OK_ORDERED )
						## Ordered collection
						public java.util.List get${plugin.upperCaseFirstLetter($ass.name)}();
					#else
						## Ordered type
						public java.util.Collection get${plugin.upperCaseFirstLetter($ass.name)}();
					#end
				#end
			#end
		#end
	#end
#end


	public boolean equals(Object obj) {
    	if ((obj == null) || (!(obj instanceof ${plugin.getInterfaceFullname($class)}))) {
    		return false;
    	}

    	${plugin.getInterfaceFullname($class)} value = (${plugin.getInterfaceFullname($class)}) obj;

		#foreach ( $att in $class.attributes )
			#if ( $plugin.matchesStereotype($att, "PrimaryKey") )
				#if ( $jmiHelper.isPrimaryType($att.type.fullyQualifiedName) )
					if (this.get${plugin.upperCaseFirstLetter($att.name)}() != value.get${plugin.upperCaseFirstLetter($att.name)}()) {
						return false;
					}
				#else
					if ((this.get${plugin.upperCaseFirstLetter($att.name)}() == null) && (value.get${plugin.upperCaseFirstLetter($att.name)}() != null)) {
						return false;
					}

					if ((this.get${plugin.upperCaseFirstLetter($att.name)}() != null) && !this.get${plugin.upperCaseFirstLetter($att.name)}().equals(value)) {
						return false;
					}
				#end
			#end
		#end    	

        return true;
    }

    public int hashCode() {
    	int hash = 0;
    	
		#foreach ( $att in $class.attributes )
			#if ( $plugin.matchesStereotype($att, "PrimaryKey") )
				#if ( $jmiHelper.isPrimaryType($att.type.fullyQualifiedName) )
					if (this.get${plugin.upperCaseFirstLetter($att.name)}() != value.get${plugin.upperCaseFirstLetter($att.name)}()) {
						return false;
					}
				#else
				#end
			#end
		#end
    	
        return super.hashCode();
    }
    
    public String toString() {
        return super.toString();
    }

}