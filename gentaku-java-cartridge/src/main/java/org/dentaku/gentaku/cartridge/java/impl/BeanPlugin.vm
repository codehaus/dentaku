//
// Attention: Generated code! Do not modify by hand!
// Generated by Gentaku Java Cartridge. 
//
// See: http://dentaku.codehaus.org/gentaku
//


package ${class.packageName};

public class ${plugin.getDestinationClassname($class)} implements ${plugin.getInterfaceFullname($class)} {

#foreach ( $att in $class.attributes )
				
	#if ( $att.ownerScope == $SK_CLASSIFIER )
		## There is no constants in implementations.
	#else

		## Just private fields (which means property) are generated.
		#if ( $att.visibility == $VK_PRIVATE )
			## It doesn't matter if its frozen, addonly or whatever. What decides it is the interface.
			private $att.type.fullyQualifiedName $att.name;

			public $att.type.fullyQualifiedName get${plugin.upperCaseFirstLetter($att.name)}() {
				return $att.name;
			}
			public void set${plugin.upperCaseFirstLetter($att.name)}($att.type.fullyQualifiedName value) {
				this.$att.name = value;
			}
		#end
		
	#end
	
#end

    public boolean equals(Object obj) {
    	if ((obj == null) || (!(obj instanceof ${plugin.getInterfaceFullname($class)}))) {
    		return false;
    	}

    	${plugin.getInterfaceFullname($class)} value = (${plugin.getInterfaceFullname($class)}) obj;

		#foreach ( $att in $class.attributes )
			#if ( $plugin.matchesStereotype($att, "PrimaryKey") )
				#if ( $jmiHelper.isPrimaryType($att.type.fullyQualifiedName) )
					if (this.get${plugin.upperCaseFirstLetter($att.name)}() != value.get${plugin.upperCaseFirstLetter($att.name)}()) {
						return false;
					}
				#else
					if ((this.get${plugin.upperCaseFirstLetter($att.name)}() == null) && (value.get${plugin.upperCaseFirstLetter($att.name)}() != null)) {
						return false;
					}

					if ((this.get${plugin.upperCaseFirstLetter($att.name)}() != null) && !this.get${plugin.upperCaseFirstLetter($att.name)}().equals(value)) {
						return false;
					}
				#end
			#end
		#end    	

        return true;
    }

    public int hashCode() {
    	int hash = 0;
    	
		#foreach ( $att in $class.attributes )
			#if ( $plugin.matchesStereotype($att, "PrimaryKey") )
				#if ( $jmiHelper.isPrimaryType($att.type.fullyQualifiedName) )
					if (this.get${plugin.upperCaseFirstLetter($att.name)}() != value.get${plugin.upperCaseFirstLetter($att.name)}()) {
						return false;
					}
				#else
				#end
			#end
		#end
    	
        return super.hashCode();
    }
    
    public String toString() {
        return super.toString();
    }

}