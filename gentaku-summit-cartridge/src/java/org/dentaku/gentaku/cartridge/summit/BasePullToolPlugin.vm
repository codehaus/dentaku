#set( $Q = '"' )

## Has an ordered list of related classes to all root classes in views
#set ( $alldepclassviews = $rootClassView.getAllDependentClassView() )

package ${qualifiedScreenName}.tools;

import ${metadata.packageName}.model.${rootClassView.entityclassname};
#foreach( $depclassview in $alldepclassviews )
import ${metadata.packageName}.model.${depclassview.entityclassname};
#end
public class ${metadata.screenName}BasePullTool {
    public void init(Object data) {
		JDOService jdos = 
            ( JDOService ) lookup( JDOService.ROLE );
    }

    public void refresh() {
        /* empty */
    }

    public String getDefaultName() {
		// Need to look for an override value in a variable set from config, by screen or selector?
        return $Q[None Selected]$Q;
    }

    public List getAll${rootClassView.entityclassname}() {
        Collection entities;
		PersistanceManager pm = jdos.getPersistenceManagerFactory().getPersistenceManager();

        if (a${rootClassView.entityclassname} == null) {
			entities = new ArrayList();
            return entities;
        }

		// Need to add record paging for large sets
        try {
            tx.begin();       
			Query q = new Query(${rootClassView.entityclassname}.class);
			entities = (Collection) q.execute();
            tx.commit();
        }
        finally
        {
            if (tx.isActive()) {
                tx.rollback();
            }
            pm.close();
			entities = new ArrayList();
        }
        return entities;
    }
#foreach( $pullclass in $alldepclassviews )
    public List get${pullclass.entityclassname}sFor${pullclass.parentsEntityname}(${pullclass.parentsEntityname} a${pullclass.parentsEntityname})
    {
        Collection entities;

        if (a${pullclass.parentsEntityname} == null) {
            return entities;
        }

		// Need to add record paging for large sets
        try {
            tx.begin();       
            Extent e = pm.getExtent(${pullclass.parentsEntityname}.class, true);  
			Query q = new Query(e, $Q${pullclass.entityclassname}.contains(a${pullclass.parentsEntityname})$Q);
			entities = (Collection) q.execute();
            tx.commit();
        }
        finally
        {
            if (tx.isActive()) {
                tx.rollback();
            }
            pm.close();
			entities = new ArryList();
        }

        return entities;
    }
#end
#foreach( $pullclass in $alldepclassviews )
    public List get${pullclass.entityclassname}sFor${pullclass.parentsEntityname}WithDefault(${pullclass.parentsEntityname} a${pullclass.parentsEntityname})
    {
        List entities = new ArrayList();
		entities = get${pullclass.entityclassname}sFor${pullclass.parentsEntityname}(${pullclass.parentsEntityname} a${pullclass.parentsEntityname});
		entities.add(getDefaultName());
		
        return entities;
    }
#end
}