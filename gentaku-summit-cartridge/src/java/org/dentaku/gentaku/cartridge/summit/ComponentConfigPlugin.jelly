<?xml version="1.0" encoding="UTF-8"?>
<j:jelly xmlns:j="jelly:core">
<component-set>
  <components>
    <component>
      <role>org.codehaus.plexus.summit.rundata.RunData</role>
      <implementation>org.codehaus.plexus.summit.rundata.DefaultRunData</implementation>
      <configuration/>
    </component>
    <component>
      <role>org.codehaus.plexus.summit.exception.ExceptionHandler</role>
      <implementation>org.codehaus.plexus.summit.exception.DefaultExceptionHandler</implementation>
      <configuration/>
    </component>
    <component>
      <role>org.codehaus.plexus.summit.parameters.RequestParameterParser</role>
      <implementation>org.codehaus.plexus.summit.parameters.SummitRequestParameterParser</implementation>
      <configuration>
        <default-encoding>US-ASCII</default-encoding>
        <max-upload-size>1048576</max-upload-size>
        <max-memory-size>10240</max-memory-size>
        <temp-directory>${basedir}/temp</temp-directory>
      </configuration>
    </component>
    
    <!-- Resolvers -->
    <component>
      <role>org.codehaus.plexus.summit.resolver.Resolver</role>
      <role-hint>new</role-hint>
      <implementation>org.codehaus.plexus.summit.resolver.NewResolver</implementation>
      <configuration>
        <default-view>Index.vm</default-view>
        <error-view>Error.vm</error-view>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.summit.resolver.Resolver</role>
      <role-hint>classic</role-hint>
      <implementation>org.codehaus.plexus.summit.resolver.ClassicResolver</implementation>
      <configuration>
        <default-view>Index.vm</default-view>
        <error-view>Error.vm</error-view>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.summit.renderer.Renderer</role>
          <role-hint>velocity</role-hint>
        </requirement>
      </requirements>
    </component>
    
    <!-- Renderers -->
    <component>
      <role>org.codehaus.plexus.summit.renderer.Renderer</role>
      <role-hint>velocity</role-hint>
      <implementation>org.codehaus.plexus.summit.renderer.VelocityRenderer</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.velocity.VelocityComponent</role>
        </requirement>
      </requirements>
    </component>
    
    <!-- Displays -->
    <component>
      <role>org.codehaus.plexus.summit.display.Display</role>
      <role-hint>classic</role-hint>
      <implementation>org.codehaus.plexus.summit.display.ClassicBufferedDisplay</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.summit.renderer.Renderer</role>
          <role-hint>velocity</role-hint>
        </requirement>
      </requirements>
    </component>
    <component>
      <role>org.codehaus.plexus.summit.display.Display</role>
      <role-hint>new</role-hint>
      <implementation>org.codehaus.plexus.summit.display.NewBufferedDisplay</implementation>
    </component>
    
    <!-- Pipeline -->
    <component>
      <role>org.codehaus.plexus.summit.pipeline.Pipeline</role>
      <implementation>org.codehaus.plexus.summit.pipeline.SummitPipeline</implementation>
      <lifecycle-handler>plexus-configurable</lifecycle-handler>
      <configuration>
        <valves>
          <valve>org.codehaus.plexus.summit.pipeline.valve.CreateViewContextValve</valve>
          <valve>org.codehaus.plexus.summit.pipeline.valve.DetermineTargetValve</valve>
          <valve>org.codehaus.plexus.summit.activity.ActionEvent</valve>
          <valve>org.codehaus.plexus.summit.pipeline.valve.ResolverValve</valve>
          <valve>org.codehaus.plexus.summit.pipeline.valve.DisplayValve</valve>
        </valves>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <role-hint>org.codehaus.plexus.summit.pipeline.valve.DetermineTargetValve</role-hint>
      <implementation>org.codehaus.plexus.summit.pipeline.valve.DetermineTargetValve</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.summit.resolver.Resolver</role>
          <role-hint>new</role-hint>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <role-hint>org.codehaus.plexus.summit.pipeline.valve.DisplayValve</role-hint>
      <implementation>org.codehaus.plexus.summit.pipeline.valve.DisplayValve</implementation>
      <configuration>
        <display>new</display>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <role-hint>org.codehaus.plexus.summit.pipeline.valve.ResolverValve</role-hint>
      <implementation>org.codehaus.plexus.summit.pipeline.valve.ResolverValve</implementation>
      <configuration>
        <resolver>new</resolver>
      </configuration>
    </component>

	<component>
	  <role>org.codehaus.plexus.summit.activity.ActionEvent</role>
	  <implementation>org.codehaus.plexus.summit.activity.ComponentActionEvent</implementation>
	  <configuration fold-method-case="true">
		<actionPackages>
		  <actionPackage>${metadata.packageName}.action</actionPackage>
		</actionPackages>
	  </configuration>
	</component>

	<j:forEach var="property" items="${plugin.getScreenNames()}">
	<component>
	  <role>org.codehaus.plexus.action.Action</role>
	  <rolehint>Crud${property}</rolehint>
	  <implementation>${metadata.packageName}.action.Crud${property}</implementation>
      <configuration>
      	<j:set var="pretest">${plugin.isPreAction(property)}</j:set>
      	<j:if test="${pretest}">
      		<j:set var="pre">${plugin.getPreAction(property)}</j:set>
		<pre-action>${pre}</pre-action>
		</j:if>
     	<j:set var="posttest">${plugin.isPostAction(property)}</j:set>
      	<j:if test="${posttest}">
      		<j:set var="post">${plugin.getPostAction(property)}</j:set>
		<post-action>${post}</post-action>
		</j:if>
      </configuration>
	</component>
	</j:forEach>
	
	<j:forEach var="property" items="${plugin.getGroovyNames()}">
	<component>
	  <role>org.codehaus.dentaku.summit.action.GroovyAction</role>
	  <rolehint>${property}</rolehint>
	  <implementation>${metadata.packageName}.action.${property}</implementation>
	</component>
	</j:forEach>

    <!-- Pull Tools -->
    <component>
      <role>org.codehaus.plexus.summit.pull.PullService</role>
      <implementation>org.codehaus.plexus.summit.pull.DefaultPullService</implementation>
      <configuration>
        <tools>
          <tool>
            <name>link</name>
            <role>linktool</role>
            <scope>request</scope>
          </tool>
          <tool>
            <name>detector</name>
            <role>detector</role>
            <scope>request</scope>
          </tool>
          <tool>
            <name>page</name>
            <role>htmlpage</role>
            <scope>request</scope>
          </tool>
		  <j:forEach var="property" items="${plugin.getScreenNames()}">
		  <tool>
			<name>tool</name>
			<role>${property}PullTool</role>
			<scope>global</scope>
		  </tool>
		  </j:forEach>
        </tools>
      </configuration>
    </component>
    <component>
      <role>linktool</role>
      <implementation>org.codehaus.plexus.summit.pull.tools.TemplateLink</implementation>
      <configuration/>
    </component>  
    <component>
      <role>detector</role>
      <implementation>org.codehaus.dentaku.summit.tool.BrowserDetector</implementation>
      <configuration/>
    </component>  
    <component>
      <role>htmlpage</role>
      <implementation>org.codehaus.dentaku.summit.pull.HtmlPageAttributes</implementation>
      <configuration>
      	<title>${plugin.getAppName()}</title>
      	<tag>HTML</tag>
      	<uri>http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd</uri>
      	<identifier>-//W3C//DTD HTML 4.01 Transitional//EN</identifier>
      </configuration>/>
    </component>  
	<j:forEach var="property" items="${plugin.getScreenNames()}">
	<component>
	  <role>${property}PullTool</role>
	  <implementation>${metadata.packageName}.tools.${property}PullTool</implementation>
	</component>
	</j:forEach>
    <component>
      <role>org.codehaus.plexus.summit.pull.tools.TemplateRenderer</role>
      <implementation>org.codehaus.plexus.summit.pull.tools.TemplateRenderer</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
      <lifecycle-handler>plexus</lifecycle-handler>
      <configuration>
        <default-view>Index.vm</default-view>
        <error-view>Error.vm</error-view>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.summit.renderer.Renderer</role>
          <role-hint>velocity</role-hint>
        </requirement>
      </requirements>
    </component>
  </components>
</component-set>
</j:jelly>
