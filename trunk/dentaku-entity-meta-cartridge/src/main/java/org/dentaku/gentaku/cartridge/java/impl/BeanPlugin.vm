//
// Attention: Generated code! Do not modify by hand!
// Generated by Gentaku Java Cartridge. 
//
// See: http://dentaku.codehaus.org/gentaku
//


package ${class.packageName};

public class ${plugin.getDestinationClassname($class)} 
#if ( $class.javaGeneralization )
	extends ${plugin.getDestinationFullyQualifiedClassName( $class.javaGeneralization )}
#end
implements ${plugin.getInterfaceFullname($class)}
{


## Counts PrimaryKey to decide which type of primary key we have.
#set( $superPKCount = 0 )
#macro( countSuperPK $k )
	#if( $k )
		#foreach( $att in $k.attributes )
			#if ( $jmiHelper.matchesStereotype($att, "PrimaryKey") )
				#set( $superPKCount = $superPKCount + 1 )		
			#end
		#end
	#end
#end
#countSuperPK( $class.javaGeneralization )
#set( $thisPKCount = $superPKCount )
#foreach( $att in $class.attributes )
	#if ( $jmiHelper.matchesStereotype($att, "PrimaryKey") )
		#set( $thisPKCount = $thisPKCount + 1 )		
	#end
#end

#if( $thisPKCount > 1 )
	##composite-id
	private ${plugin.getDestinationClassname($class)}PK _pk;
	public ${plugin.getDestinationClassname($class)}PK get_PK() { return this._pk; }
	public void set_PK(${plugin.getDestinationClassname($class)}PK value) { this._pk = value; }
#end


## Parse Atributtes
#foreach( $att in $class.attributes )

	#if ( $att.isOne() )
		#if( $att.ownerScope == $SK_CLASSIFIER )
			##	If an attribute, in an interface, is static its in fact a constant.
			## does not matter if its public or not.
			public static final ${att.type.fullyQualifiedName} ${att.name} = ${att.initialValue.body} ;
		#else
			## Just private fields (which means property) are generated.
			#if( $att.visibility == $VK_PRIVATE )
				#if ( $jmiHelper.matchesStereotype($att, "PrimaryKey") )
					#if ( $thisPKCount > 1 )
						public ${javaHelper.parseType($att.type.fullyQualifiedName)} get${plugin.upperCaseFirstLetter($att.name)}() { 
							if (this.get_PK() == null) { return null; }
							return this.get_PK().get${plugin.upperCaseFirstLetter($att.name)}();
						}
					#else
						#if( $att.initialValue.body )
							private ${javaHelper.parseType($att.type.fullyQualifiedName)} ${att.name} = ${att.initialValue.body};
						#else
							private ${javaHelper.parseType($att.type.fullyQualifiedName)} ${att.name};
						#end
						public ${javaHelper.parseType($att.type.fullyQualifiedName)} get${plugin.upperCaseFirstLetter($att.name)}() { return this.${att.name}; }
						public void set${plugin.upperCaseFirstLetter($att.name)}(${javaHelper.parseType($att.type.fullyQualifiedName)} value) { this.${att.name} = value; }
					#end
				#else
					#if( $att.initialValue.body )
						private ${javaHelper.parseType($att.type.fullyQualifiedName)} ${att.name} = ${att.initialValue.body};
					#else
						private ${javaHelper.parseType($att.type.fullyQualifiedName)} ${att.name};
					#end
					public ${javaHelper.parseType($att.type.fullyQualifiedName)} get${plugin.upperCaseFirstLetter($att.name)}() { return this.${att.name}; }
					public void set${plugin.upperCaseFirstLetter($att.name)}(${javaHelper.parseType($att.type.fullyQualifiedName)} value) { this.${att.name} = value; }
				#end
			#end
		#end
	#else
	## anything to many
		## Just private fields (which means property) are generated.
		#if( $att.visibility == $VK_PRIVATE )

			## anything to many
			#if ( $jmiHelper.getTaggedSingleValue( $att, "isArray" ) == "true" )
				## Is it array?
				private ${javaHelper.parseType($att.type.fullyQualifiedName)}[] ${att.name};
				public ${javaHelper.parseType($att.type.fullyQualifiedName)}[] get${plugin.upperCaseFirstLetter($att.name)}() { return this.${att.name}; }
				public void set${plugin.upperCaseFirstLetter($att.name)}(${javaHelper.parseType($att.type.fullyQualifiedName)}[] value) { this.${att.name} = value; }
			#elseif ( $att.ordering == $OK_ORDERED )
				## Ordered collection
				#if ( $att.changeability == $CK_FROZEN  )
					private java.util.List ${att.name} = org.apache.commons.collections.ListUtils.EMPTY_LIST;
					public void set${plugin.upperCaseFirstLetter($att.name)}(java.util.List value) { this.${att.name} = org.apache.commons.collections.list.UnmodifiableList.decorate(value); }
				#else

					#if ( $att.initialValue.body )
						#set( $initialValue = $att.initialValue.body )
					#else
						#set( $initialValue = "new java.util.ArrayList()" )
					#end
				
					private java.util.List ${att.name} = org.apache.commons.collections.list.TypedList.decorate(${initialValue}, ${javaHelper.parseType($att.type.fullyQualifiedName)}.class);
					public void set${plugin.upperCaseFirstLetter($att.name)}(java.util.List value) { this.${att.name} = org.apache.commons.collections.list.TypedList.decorate(value, ${javaHelper.parseType($att.type.fullyQualifiedName)}.class); }
				#end
				
				public java.util.List get${plugin.upperCaseFirstLetter($att.name)}() { return this.${att.name}; }
			#else
				## Unordered type
				#if ( $ass.changeability == $CK_FROZEN  )
					private java.util.Collection ${att.name} = org.apache.commons.collections.CollectionUtils.EMPTY_COLLECTION;
					public void set${plugin.upperCaseFirstLetter(${att.name})}(java.util.Collection value) { this.${att.name} = org.apache.commons.collections.collection.UnmodifiableCollection.decorate(value); }
				#else

					#if ( $att.initialValue.body )
						#set( $initialValue = $att.initialValue.body )
					#else
						#set( $initialValue = "new java.util.ArrayList()" )
					#end
	
					private java.util.Collection ${att.name} = org.apache.commons.collections.collection.TypedCollection.decorate(${initialValue}, ${javaHelper.parseType($att.type.fullyQualifiedName)}.class);
					public void set${plugin.upperCaseFirstLetter($att.name)}(java.util.Collection value) { this.${att.name} = org.apache.commons.collections.collection.TypedCollection.decorate(value, ${javaHelper.parseType($att.type.fullyQualifiedName)}.class); }
				#end

				public java.util.Collection get${plugin.upperCaseFirstLetter($att.name)}() { return this.${att.name}; }
			#end

		#end
	#end
#end

## Associations
#foreach( $ass in $class.targetEnds )

	#if( $ass.isNavigable() )
		## Anything to One
		#if( $ass.targetScope == $SK_INSTANCE )
			## Just private fields (which means property) are generated.
			#if( $ass.visibility == $VK_PRIVATE )
				#if ( $ass.isOne2One() || $ass.isOne2Many() )
					## anything to one
					#if ( $jmiHelper.getTaggedSingleValue( $ass, "initialValue" ) == "" )
						#set( $initialValue = "" )
					#else
						#set( $initialValue = ${jmiHelper.getTaggedSingleValue( $ass, "initialValue" )} )
						#set( $initialValue = "= ${initialValue}" )
					#end

					private ${ass.participant.fullyQualifiedName} ${ass.name} ${initialValue};
					public ${ass.participant.fullyQualifiedName} get${plugin.upperCaseFirstLetter($ass.name)}() { return this.${ass.name}; }
					public void set${plugin.upperCaseFirstLetter($ass.name)}($ass.participant.fullyQualifiedName value) { this.${ass.name} = value; }
				#else
					## anything to many
					#if ( $jmiHelper.getTaggedSingleValue( $ass, "isArray" ) == "true" )
						## Is it array?
						private ${ass.participant.fullyQualifiedName}[] ${ass.name};
						public ${ass.participant.fullyQualifiedName}[] get${plugin.upperCaseFirstLetter($ass.name)}() { return this.${ass.name}; }
						public void set${plugin.upperCaseFirstLetter($ass.name)}(${ass.participant.fullyQualifiedName}[] value) { this.${ass.name} = value; }
					#elseif ( $ass.ordering == $OK_ORDERED )
						## Ordered collection
						#if ( $ass.changeability == $CK_FROZEN  )
							private java.util.List ${ass.name} = org.apache.commons.collections.ListUtils.EMPTY_LIST;
							public void set${plugin.upperCaseFirstLetter($ass.name)}(java.util.List value) { this.${ass.name} = org.apache.commons.collections.list.UnmodifiableList.decorate(value); }
						#else
							#if ( $jmiHelper.getTaggedSingleValue( $ass, "initialValue" ) == "" )
								#set( $initialValue = "new java.util.ArrayList()" )
							#else
								#set( $initialValue = $jmiHelper.getTaggedSingleValue( $ass, "initialValue" ))
							#end
						
							private java.util.List ${ass.name} = org.apache.commons.collections.list.TypedList.decorate(${initialValue}, ${ass.participant.fullyQualifiedName}.class);
							public void set${plugin.upperCaseFirstLetter(${ass.name})}(java.util.List value) { this.${ass.name} = org.apache.commons.collections.list.TypedList.decorate(value, ${ass.participant.fullyQualifiedName}.class); }
						#end
						
						public java.util.List get${plugin.upperCaseFirstLetter(${ass.name})}() { return this.${ass.name}; }
					#else
						## Unordered type
						#if ( $ass.changeability == $CK_FROZEN  )
							private java.util.Collection ${ass.name} = org.apache.commons.collections.CollectionUtils.EMPTY_COLLECTION;
							public void set${plugin.upperCaseFirstLetter($ass.name)}(java.util.Collection value) { this.${ass.name} = org.apache.commons.collections.collection.UnmodifiableCollection.decorate(value); }
						#else
							#if ( $jmiHelper.getTaggedSingleValue( $ass, "initialValue" ) == "" )
								#set( $initialValue = "new java.util.ArrayList()" )
							#else
								#set( $initialValue = $jmiHelper.getTaggedSingleValue( $ass, "initialValue" ))
							#end
						
							private java.util.Collection ${ass.name} = org.apache.commons.collections.collection.TypedCollection.decorate(${initialValue}, ${ass.participant.fullyQualifiedName}.class);
							public void set${plugin.upperCaseFirstLetter(${ass.name})}(java.util.Collection value) { this.${ass.name} = org.apache.commons.collections.collection.TypedCollection.decorate(value, ${ass.participant.fullyQualifiedName}.class); }
						#end

						public java.util.Collection get${plugin.upperCaseFirstLetter($ass.name)}() { return this.${ass.name}; }
					#end
				#end
			#end
		#end
	#end
#end


	public boolean equals(Object obj) {

    	if ((obj == null) || (!(obj instanceof ${plugin.getInterfaceFullname($class)}))) {
    		return false;
    	}
    	${plugin.getInterfaceFullname($class)} value = (${plugin.getInterfaceFullname($class)}) obj;

		#if ( $thisPKCount > 1 )
			##composite-id
			return org.apache.commons.lang.ObjectUtils.equals(this.get_PK(), value.get_PK());		
		#else
			## single id
	
			boolean ret = true;
	
			#if( $class.javaGeneralization )
				ret &= super.equals(value);
			#end
	
			#foreach ( $att in $class.attributes )
				#if ( $jmiHelper.matchesStereotype($att, "PrimaryKey") )
					ret &= org.apache.commons.lang.ObjectUtils.equals(this.get${plugin.upperCaseFirstLetter($att.name)}(), value.get${plugin.upperCaseFirstLetter($att.name)}());
				#end
			#end    	
	
	        return ret;
		#end
    }

    public int hashCode() {
		#if ( $thisPKCount > 1 )
			##composite id
			if(this.get_PK() == null) { return 0; }
			return this.get_PK().hashCode();
		#else
			## single id
	    	int hash = 0;
	
			#if( $class.javaGeneralization )
				hash += super.hashCode();
			#end
	
			#foreach ( $att in $klasse.attributes )
				#if ( $jmiHelper.matchesStereotype($att, "PrimaryKey") )
					if (this.get${plugin.upperCaseFirstLetter($att.name)}() != null) { hash += this.get${plugin.upperCaseFirstLetter($att.name)}().hashCode(); }
				#end
			#end
	    	
	        return hash;
		#end
    }
    
    public String toString() {
		org.apache.commons.lang.builder.ToStringBuilder builder = new org.apache.commons.lang.builder.ToStringBuilder(this);

		#if( $class.javaGeneralization )
			builder.appendSuper(super.toString());
		#end

		#foreach ( $att in $class.attributes )
			#if ( $jmiHelper.matchesStereotype($att, "PrimaryKey") )
				builder.append("${att.name}", this.get${plugin.upperCaseFirstLetter($att.name)}());
			#end
		#end

		return builder.toString();
    }

}