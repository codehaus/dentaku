#set( $class = $metadata )
package ${class.package};

public class ${plugin.getDestinationClassname($class)} extends org.dentaku.gentaku.GentakuTagImpl implements ${class.fullyQualifiedName} {
    public static final String NAME = "${plugin.getQTagUtils().getDocletTagName($class)}";
    private org.netbeans.jmiimpl.omg.uml.foundation.core.ModelElementImpl entity;
    private static final java.util.List ALLOWED_PARAMETERS = java.util.Arrays.asList( new String[] {
   #foreach($method in ${class.getMethods(true)})
        #if(!$method.parentClass.fullyQualifiedName.equals('com.thoughtworks.qdox.model.DocletTag'))
            "${plugin.getQTagUtils().getDocletTagParameterName($method)}",
        #end
    #end
    ""
    });
    
    private static final java.util.List ALLOWED_VALUES = java.util.Arrays.asList( new String[] {
        #foreach ( $tag in $class.getTagsByName('qtags.allowed-value') )
            "${tag.value}",
        #end
        ""
    });
    public ${plugin.getDestinationClassname($class)}(String name, String value, org.netbeans.jmiimpl.omg.uml.foundation.core.ModelElementImpl entity, int lineNumber) {
        super(name, value, entity, lineNumber);
        this.entity = entity;
    }

#foreach($method in ${class.getMethods(true)})
    #if(!$method.parentClass.fullyQualifiedName.equals('com.thoughtworks.qdox.model.DocletTag'))
    #set( $checkParameters = 'true' ) 
    public $method.getDeclarationSignature(true) {
        #if($method.getTagByName("qtags.required"))
            boolean required = true;
        #else
            boolean required = false;
        #end
        String result = getNamedParameter("${plugin.getQTagUtils().getDocletTagParameterName($method)}");
        if(required && result == null) {
            bomb("${plugin.getQTagUtils().getDocletTagParameterName($method)}=\"???\" must be specified.");
        }

        #if($method.getTagByName("qtags.allowed-value"))
        if(result != null) {
            if( !(false #foreach($tag in $method.getTagsByName("qtags.allowed-value"))|| result.equals("$tag.value")#end) ) {
                // todo we should say what file and line number too
                bomb("${plugin.getQTagUtils().getDocletTagParameterName($method)}=\"" + result + "\" is an invalid parameter value.");
            }
        }
        #end
        
        #if($method.getTagByName("qtags.default"))
            if(result == null) {
                result = "${method.getTagByName("qtags.default").value}";
            }
        #end
        
        #if($method.returns.value == "java.lang.Boolean")
            if(result != null) {
                return Boolean.valueOf(result);
            } else {
                return null;
            }
        #elseif($method.returns.value == "boolean")
            return Boolean.valueOf(result).booleanValue();
        #elseif($method.returns.value == "int")
            if (result != null) {
                try {
                    return Integer.decode(result).intValue();
                } catch(NumberFormatException nfe) {
                    bomb("${plugin.getQTagUtils().getDocletTagParameterName($method)}=\"" + result + "\" is not valid integer");
                    throw nfe;
                }
            } else {
                return 0;
            }
        #elseif($method.returns.value == "java.lang.Integer")
            if(result != null) {
                try {
                    return Integer.decode(result);
                } catch(NumberFormatException nfe) {
                    bomb("${plugin.getQTagUtils().getDocletTagParameterName($method)}=\"" + result + "\" is not valid integer");
                    throw nfe;
                }
            } else {
                return null;
            }
        #else
            return result;
        #end
    }
    #end
#end

    protected void validateLocation() {
        #if($plugin.getQTagUtils().disallowedOn($class, "class"))
            if(isOnClass()) {
                bomb("is not allowed on classes");
            }
        #end
        #if($plugin.getQTagUtils().disallowedOn($class, "field"))
            if(isOnField()) {
                bomb("is not allowed on fields");
            }
        #end
        #if($plugin.getQTagUtils().disallowedOn($class, "constructor"))
            if(isOnConstructor()) {
                bomb("is not allowed on constructors");
            }
        #end
        #if($plugin.getQTagUtils().disallowedOn($class, "method"))
            if(isOnMethod()) {
                bomb("is not allowed on methods");
            }
        #end
        
        // check uniqueness
        
        #if ( $class.getTagByName('qtags.once') )
            if(entity.getTaggedValuesForName(NAME).size() > 1) {
                bomb("is allowed only once");
            }
        #end

        // warn deprecation
        #if ( $class.getTagByName('qtags.deprecated') ) 
            System.err.println("@" + getName() + ":"  + getValue());
        #end
        
        // check for allowed values for whole tag
        if( ALLOWED_VALUES.size() > 1 && !ALLOWED_VALUES.contains(getValue())) {
            bomb( "\"" + getValue() +"\" is not a valid value. Allowed values are #foreach($tag in $class.getTagsByName('qtags.allowed-value')) \"${tag.value}\"\n#end");
        }        
        #if ( $checkParameters )

        // Verify that all parameters are known.
        final java.util.Collection parameterNames = getNamedParameterMap().keySet();
        for (java.util.Iterator iterator = parameterNames.iterator(); iterator.hasNext();) {
            String parameterName = (String) iterator.next();
            if (!ALLOWED_PARAMETERS.contains(parameterName)) {
                bomb(parameterName + " is an invalid parameter name.");
            }
        }
        #end
        
        // Get all the parameters to validate their contents
        #foreach($method in ${class.methods})
            ${method.callSignature};
        #end
        
    }
}