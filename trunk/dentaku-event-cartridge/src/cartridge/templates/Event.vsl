/**
 * Attention: Generated source! Do not modify by hand!
 */
#set ($packagename = $transform.findPackageName(${class.package}))
package $packagename;
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end

public class ${class.name} extends AbstractEvent {
#foreach ( $assoc in $class.associationLinks )
    #set ($adata = $transform.getAssociationData($assoc))
    #if ($transform.isAssociationEndClass($adata.target))
    #set ($targettype = $adata.target.type)
    #set ($targettypename = $transform.findFullyQualifiedName($targettype))
   /**
#generateDocumentation ($adata.target.end "    ")
    */
    private ${targettypename} ${adata.target.roleName};

    public ${targettypename} get${str.upperCaseFirstLetter($adata.target.roleName)}()
    {
        return this.${adata.target.roleName};
    }

    public void set${str.upperCaseFirstLetter($adata.target.roleName)}(${targettypename} ${adata.target.roleName})
    {
        this.${adata.target.roleName} = ${adata.target.roleName};
    }
#end
#end

    public java.net.URL getWorkflowURL() {
        return this.getClass().getResource("${class.name}.xml");
    }
}
