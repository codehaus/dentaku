/**
 * $dontedit
 */
#set( $class = $metadata )
package ${plugin.getDestinationPackage($class)};

#set ($primKey = $plugin.umlUtils.getPrimaryKeyAttribute($class))
##

/**
#set ($tablename = $plugin.umlUtils.getDatabaseTableName(${class}))
 *
 * @hibernate.class
 * @hibernate.discriminator column="class"
#foreach ( $tgv in $class.taggedValue )
#if ($tgv.name != "documentation")
 * $tgv.name    $tgv.dataValue
#end
#end
 *
 */
public abstract class ${class.name}Base
        implements org.dentaku.services.persistence.XMLBean, org.dentaku.services.persistence.ModelEntity {

    public void getXML(org.dom4j.Element el) throws org.dentaku.services.exception.XMLBeanException {
        try {
            org.dom4j.Element beanElement = el.addElement("${class.name}");
#foreach ( $att in $class.attributes )
            org.dentaku.services.persistence.XMLUtil.addChild(beanElement, "${att.name}", org.apache.commons.beanutils.BeanUtils.getSimpleProperty(this, "${att.name}"));
#end
        } catch (Exception e) {
            throw new org.dentaku.services.exception.XMLBeanException("error creating DOM", e);
        }
    }

    public void setXML(org.dom4j.Element el) throws org.dentaku.services.exception.XMLBeanException {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    // --------------- attributes ---------------------
#foreach ( $att in $plugin.umlUtils.getAttributes($class) )
#set ($atttypename = $plugin.umlUtils.getFullyQualifiedName($att.type))
    private $atttypename ${att.name};
   
   /**
    *
#set ($attcolumnname = $plugin.umlUtils.getDatabaseColumnName(${att}))
#set ($attjdbctype   = $plugin.umlUtils.findAttributeJDBCType($att))
#set ($attsqltype    = $plugin.umlUtils.findAttributeSQLType($att))
#if ($plugin.umlUtils.matchesStereotype($att, "PrimaryKey"))
    * @hibernate.id generator-class="native"
#else
    * @hibernate.property
#end
    *     column="$attcolumnname"
    * @hibernate.column name="$attcolumnname" sql-type="$attsqltype"
    */
    public $atttypename get${plugin.umlUtils.upperCaseFirstLetter(${att.name})}()
    {
        return this.${att.name};
    }
    
    public void set${plugin.umlUtils.upperCaseFirstLetter(${att.name})}($atttypename newValue)
    {
        this.${att.name} = newValue;
    }


#end

    // ------------- relations ------------------

#set ($sep = "_")
#set ($suffix = "_FK")
#foreach ( $sourceAssocEnd in $plugin.umlUtils.getAssociationEnds($class) )
    #set ($targetAssocEnd = $plugin.umlUtils.getOtherEnd($sourceAssocEnd) )
#if ($targetAssocEnd.navigable == true)
    #set ($sourcetype = $sourceAssocEnd.participant)
    #set ($targettype = $targetAssocEnd.participant)
    #set ($targettypename = $plugin.getDestinationFullyQualifiedClassName($targettype) )
   /**
##    * multiplicity:     $sourceAssocEnd.multiplicities
##    * source navigable: $sourceAssocEnd.navigable
##    * target navigable: $targetAssocEnd.navigable
    *
#if ($plugin.umlUtils.isOne2Many($sourceAssocEnd))
    * @hibernate.set role="$targetAssocEnd.name" lazy="$lazy"
    * @hibernate.collection-key column="${plugin.umlUtils.getDatabaseColumnName($targetAssocEnd.participant)}"
    * @hibernate.collection-one-to-many class="$targettypename"
    */
    public java.util.Collection get${plugin.umlUtils.upperCaseFirstLetter($targetAssocEnd.name)}()
    {
        return this.${targetAssocEnd.name};
    }

    public void set${plugin.umlUtils.upperCaseFirstLetter($targetAssocEnd.name)}(java.util.Collection ${targetAssocEnd.name})
    {
        this.${targetAssocEnd.name} = ${targetAssocEnd.name};
    }

    private java.util.Collection ${targetAssocEnd.name};
    
#end
#if ($plugin.umlUtils.isMany2Many($sourceAssocEnd))
##
#set ($sourceKeyAtt  = $plugin.umlUtils.upperCaseFirstLetter(${plugin.umlUtils.getPrimaryKeyAttribute($sourcetype).name}))
#set ($sourceColumn  = "${sourceAssocEnd.source.roleName}$sourceKeyAtt")
#set ($sourceColumn  = ${plugin.umlUtils.getDatabaseColumnName($sourceColumn)})
##
#set ($targetAssocEndKeyAtt  = $plugin.umlUtils.upperCaseFirstLetter(${plugin.umlUtils.getPrimaryKeyAttribute($targettype).name}))
#set ($targetAssocEndColumn  = "${targetAssocEnd.name}$targetAssocEndKeyAtt")
#set ($targetAssocEndColumn  = ${plugin.umlUtils.getDatabaseColumnName($targetAssocEndColumn)})
##
#set ($joinTableName = ${plugin.umlUtils.toRelationName($sourceColumn, $targetAssocEndColumn, $sep)})
##
    * @hibernate.set lazy="$lazy" table="${joinTableName}"
    * @hibernate.collection-key column="$sourceColumn"
    * @hibernate.collection-many-to-many column="$targetAssocEndColumn" class="$targettypename"
    */
    public java.util.Collection get${plugin.umlUtils.upperCaseFirstLetter($targetAssocEnd.name)}()
    {
        return this.${targetAssocEnd.name};
    }

    public void set${plugin.umlUtils.upperCaseFirstLetter($targetAssocEnd.name)}(java.util.Collection ${targetAssocEnd.name})
    {
        this.${targetAssocEnd.name} = ${targetAssocEnd.name};
    }

    private java.util.Collection ${targetAssocEnd.name};
    
#end
#if ($plugin.umlUtils.isOne2One($sourceAssocEnd) || $plugin.umlUtils.isMany2One($sourceAssocEnd))
#if ($sourceAssocEnd.isMany2One())
    *   @hibernate.many-to-one
#end
#if ($sourceAssocEnd.isOne2One())
    *   @hibernate.one-to-one
#end
#set($foreignKeyColumn = "${plugin.umlUtils.getDatabaseColumnName(${targetAssocEnd.name})}")
    *       column="${foreignKeyColumn}"
    */
    public ${targettypename} get${plugin.umlUtils.upperCaseFirstLetter($targetAssocEnd.name)}()
    {
        return this.${targetAssocEnd.name};
    }
    
    public void set${plugin.umlUtils.upperCaseFirstLetter($targetAssocEnd.name)}(${targettypename} ${targetAssocEnd.name})
    {
        this.${targetAssocEnd.name} = ${targetAssocEnd.name};
    }

    private ${targettypename} ${targetAssocEnd.name};

#end


#end
#end

    // ---------------- business methods  ----------------------

#foreach ( $op in $plugin.umlUtils.getOperations($class) )
#if ($plugin.umlUtils.matchesStereotype($op.id, "FinderMethod") == false)
#set ($msig = $plugin.umlUtils.getOperationSignature($op))
#set ($returntype = $plugin.getDestinationFullyQualifiedClassName($op.getType()))
#if ($defaultException)
    $op.visibility abstract $returntype ${msig}
        throws $defaultException.name;
#else
    $op.visibility abstract $returntype ${msig};
#end
#end
#end

}
