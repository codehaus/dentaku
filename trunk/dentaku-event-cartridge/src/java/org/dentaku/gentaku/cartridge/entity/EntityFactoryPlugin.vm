/*
 * $dontedit
 */
#set( $class = $metadata )
#set ($packagename = $transform.findPackageName(${class.package}))
package $packagename;

import org.dentaku.services.persistence.PersistenceException;
import org.dentaku.services.persistence.PersistenceFactory;
import org.dentaku.services.persistence.PersistenceManager;

##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##

/**
 * <p>
 * Factory class.
 * Is able to find and create objects of type ${class.name}.
 * Those can be described as follows:
 * </p>
#generateDocumentation ($class " ")
#set ($tablename = $str.toDatabaseAttributeName(${class.name}, "_"))
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag != "documentation")
#if ($tgv.tag == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.tag)
#end
 * $tag    $tgv.value
#end
#end
 *
 */
public class ${class.name}Factory implements PersistenceFactory {
    PersistenceManager pm = null;

    public void setManager(PersistenceManager pm) {
        this.pm = pm;
    }

   // ---------------- create methods --------------------

   /**
    * Creates a null ${class.name} object.
    * @return Object  the created ${class.name}
    */
    public org.dentaku.services.persistence.ModelEntity create() throws PersistenceException {
#if ( $class.isAbstract() == false)
        return new ${class.name}();
#else
        throw new PersistenceException("Can't instantiate abstract object");
#end
    }

   /**
    * Clone the object.
    * @return ${class.name} the created object
    */
    public org.dentaku.services.persistence.ModelEntity create(Object src) throws PersistenceException {
#if ( $class.isAbstract() == false)
        ${class.name} source = (${class.name})src;
        ${class.name} object = new ${class.name}();

#foreach ( $att in $class.attributes)
#if ($transform.getStereotype($att.getId()) != "PrimaryKey")
        object.set${str.upperCaseFirstLetter(${att.name})} (source.get${str.upperCaseFirstLetter(${att.name})}());
#end
#end
        pm.saveOrUpdate(object);

        return object;
#else
        throw new PersistenceException("Can't instantiate abstract object");
#end
    }

    // ---------------- finder methods  ----------------------
#set ($primKey = $transform.getPrimaryKeyAttribute($class))
#set ($primKeyTypeName = $transform.findFullyQualifiedName($primKey.type))
    /**
     *
     * Finds ${class.name} object by its primary key.
     * In Hibernate, this is just a call to load().
     *
     */
    public org.dentaku.services.persistence.ModelEntity findByPrimaryKey (java.io.Serializable ${primKey.name}) throws PersistenceException {
        return (org.dentaku.services.persistence.ModelEntity)pm.load(${class.name}.class, ${primKey.name});
    }

#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) == "FinderMethod")
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
##
#set ($parameterList = $transform.getOperationTypedParameterList($op))
#if ($parameterList.length() == 0)
#set ($parameters = "")
#else
#set ($parameters = "${parameterList}")
#end
##
    /**
#generateDocumentation ($op "    ")
     *
     * Finds ${class.name} object(s) using a query.
     * @todo: remove hibernate dependencies
     */
    $op.visibility $returntype ${op.name} ($parameters)
        throws PersistenceException
    {
##
#set($querystring = "")
#set($querystring = $transform.findTagValue($op.taggedValues, "@andromda.hibernate.query"))
#if($querystring == "")
#set($querystring = "from c in class ${transform.findFullyQualifiedName($class)}")
#if($op.parameters.size() > 0)
#set($querystring = "${querystring} where")
#foreach($prm in $op.parameters)
#set($querystring="${querystring} c.$prm.name=?")
#if($velocityCount != $op.parameters.size())
#set($querystring = "${querystring} and")
#end
#end
#end
#end
##
        $returntype result = null;
##
        java.util.ArrayList types = new java.util.ArrayList();
        java.util.ArrayList values = new java.util.ArrayList();
#foreach($prm in $op.parameters)
#set ($index = $velocityCount - 1)
        types.add(net.sf.hibernate.Hibernate.${str.toUpperCase($prm.type.name)});
        values.add(${prm.name});
#end
##
        return pm.find("$querystring", values.toArray(), (net.sf.hibernate.type.Type [])types.toArray(new net.sf.hibernate.type.Type[types.size()]));
    }

#end##if stereotype=="FinderMethod"
#end##foreach operation

    // ---------------- filter methods  ----------------------
#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) == "FilterMethod")
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
    /**
#generateDocumentation ($op "    ")
     *
     * Filter a collection.
     * @todo: remove hibernate dependencies
     */
    $op.visibility java.util.Collection ${op.name} (java.util.Collection c) throws PersistenceException
    {
##
#set($querystring = $transform.findTagValue($op.taggedValues, "@gentaku.hibernate.filter"))
##
        return pm.filter(c, "$querystring");
    }

#end##if stereotype=="FilterMethod"
#end##foreach operation
}
