/*
 * $dontedit
 */
#set( $class = $metadata )
#set ($packagename = $transform.findPackageName(${class.package}))
package $packagename;
##
#macro ( generateDocumentation $item $indent)
#foreach ( $tgv in $item.taggedValues )
#if ($tgv.tag == "gentaku.persistence.SQLTableName")
#set ( $tablename = $tgv.value )
#elseif ($tgv.tag == "documentation")
#set ($paras = $transform.formatHTMLStringAsParagraphs($tgv.value))
#foreach ( $par in $paras )
${indent}*
${indent}* <p>
#foreach ( $line in $par.lines )
${indent}* $line
#end
${indent}* </p>
#end
#end
#end
#end
##
#set ($primKey = $transform.getPrimaryKeyAttribute($class))
#set ($primKeyTypeName = $transform.findFullyQualifiedName($primKey.type))
##
#foreach ( $dep in $class.dependencies )
    #if ($transform.getStereotype($dep.id) == "Exception")
        #set ($class2 = $transform.findClassById($dep.targetType))
        #set ($defaultException = $transform.findFullyQualifiedName($class2))
    #end
#end

/**
#generateDocumentation ($class " ")
 *
/**
#foreach ( $tgv in $class.taggedValues )
#if ($tgv.tag != "documentation")
#if ($tgv.tag == "---")
    #set ($tag = "")
#else
    #set ($tag = $tgv.tag)
#end
 * $tag    $tgv.value
#end
#end
 */
public abstract class ${class.name}Base extends org.dentaku.services.persistence.ModelEntity implements org.dentaku.services.persistence.XMLBean {

    public void getXML(org.dom4j.Element el) throws org.dentaku.services.exception.XMLBeanException {
        try {
            org.dom4j.Element beanElement = el.addElement("${class.name}");
#foreach ( $att in $class.attributes )
            org.dentaku.services.persistence.XMLUtil.addChild(beanElement, "${att.name}", org.apache.commons.beanutils.BeanUtils.getSimpleProperty(this, "${att.name}"));
#end
        } catch (Exception e) {
            throw new org.dentaku.services.exception.XMLBeanException("error creating DOM", e);
        }
    }

    public void setXML(org.dom4j.Element el) throws org.dentaku.services.exception.XMLBeanException {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    // --------------- attributes ---------------------
#foreach ( $att in $class.attributes )
#set ($atttypename = $transform.findFullyQualifiedName($att.type))
#set ($attcolumnname = $str.toDatabaseAttributeName(${att.name}, "_"))
#foreach ( $tgv in $att.taggedValues )
#if ( $tgv.tag == "gentaku.persistence.SQLColumnName" )
#set ( $attcolumnname = $tgv.value )
#end
#end
    protected $atttypename ${att.name};

   /**
#generateDocumentation ($att "    ")
    *
#set ($attjdbctype   = $transform.findAttributeJDBCType($att))
#set ($attsqltype    = $transform.findAttributeSQLType($att))
#if ($transform.getStereotype($att.id) == "PrimaryKey")
#foreach ( $tgv in $att.taggedValues )
#if ($tgv.tag == "gentaku.sequence.name")
    * @hibernate.generator-param name="sequence" value="$tgv.value"
#end
#end
    * @hibernate.id generator-class="native"
#else
    * @hibernate.property
#end
    *     column="$attcolumnname"
    * @hibernate.column name="$attcolumnname" sql-type="$attsqltype"
    */
    public $atttypename get${str.upperCaseFirstLetter(${att.name})}()
    {
        return this.${att.name};
    }

    public void set${str.upperCaseFirstLetter(${att.name})}(${atttypename} newValue)
    {
        this.${att.name} = newValue;
    }


#end

    // ------------- relations ------------------

#set ($sep = "_")
#set ($suffix = "_FK")
#foreach ( $assoc in $class.associationLinks )
#set ($foreignKeyColumn = "")
    #if ($transform.getStereotype($assoc) == "EagerLoading")
      #set ($lazy = "false")
    #else
      #set ($lazy = "true")
    #end
    #set ($adata = $transform.getAssociationData($assoc))
    #set ($sourcetype = $adata.source.type)
    #set ($targettype = $adata.target.type)
    #set ($targettypename = $transform.findFullyQualifiedName($targettype))
#if ($adata.target.navigable == "true")
   /**
#generateDocumentation ($adata.target.end "    ")
    * multiplicity:     $adata.multiplicities
    * source navigable: $adata.source.navigable
    * target navigable: $adata.target.navigable
    *
#if ($adata.isOne2Many())
#set ( $order = "" )
#set ( $tgv = "" )
#set ( $foreignKeyColumn = "" )
#foreach ( $tgv in $adata.target.taggedValues )
#if ($tgv.tag == "gentaku.persistence.SQLFKColumnName")
#set ( $foreignKeyColumn = $tgv.value )
#elseif ($tgv.tag == "gentaku.persistence.HibernateInverse")
#set ( $inverse = $tgv.value )
#elseif ($tgv.tag == "gentaku.persistence.order-by")
#set ( $order = $tgv.value )
#end
#end
#if ( $foreignKeyColumn == "" )
#set($foreignKeyColumn = "${str.toDatabaseAttributeName(${adata.source.roleName}, $sep)}$suffix")
#end

#set ($foreignKeyAtt = $transform.getPrimaryKeyAttribute($sourcetype))
    * @hibernate.set role="$adata.target.roleName" lazy="$lazy"
#if ($inverse != "")
                inverse="$inverse"
#end
#if ($order != "")
                order-by="$order"
#end
    * @hibernate.collection-key column="$foreignKeyColumn"
    * @hibernate.collection-one-to-many class="$targettypename"
    */
    public java.util.Collection get${str.upperCaseFirstLetter($adata.target.roleName)}()
    {
        return (this.${adata.target.roleName});
    }

    public void set${str.upperCaseFirstLetter($adata.target.roleName)}(java.util.Collection ${adata.target.roleName})
    {
        this.${adata.target.roleName} = ${adata.target.roleName};
    }

    private java.util.Collection ${adata.target.roleName};

#end
#if ($adata.isMany2Many())
##
#set ($sourceKeyAtt  = $str.upperCaseFirstLetter(${transform.getPrimaryKeyAttribute($sourcetype).name}))
#set ($sourceColumn  = "${adata.source.roleName}$sourceKeyAtt")
#set ($sourceColumn  = ${str.toDatabaseAttributeName($sourceColumn, $sep)})
##
#set ($targetKeyAtt  = $str.upperCaseFirstLetter(${transform.getPrimaryKeyAttribute($targettype).name}))
#set ($targetColumn  = "${adata.target.roleName}$targetKeyAtt")
#set ($targetColumn  = ${str.toDatabaseAttributeName($targetColumn, $sep)})
##
#set ($joinTableName = ${str.toRelationName($sourceColumn, $targetColumn, $sep)})
##
    * @hibernate.set lazy="$lazy" table="${joinTableName}"
    * @hibernate.collection-key column="$sourceColumn"
    * @hibernate.collection-many-to-many column="$targetColumn" class="$targettypename"
    */
    public java.util.Collection get${str.upperCaseFirstLetter($adata.target.roleName)}()
    {
        return (this.${adata.target.roleName});
    }

    public void set${str.upperCaseFirstLetter($adata.target.roleName)}(java.util.Collection ${adata.target.roleName})
    {
        this.${adata.target.roleName} = ${adata.target.roleName};
    }

    private java.util.Collection ${adata.target.roleName};

#end
#if ($adata.isOne2One() || $adata.isMany2One())
#if ($adata.isMany2One())
    *   @hibernate.many-to-one
#elseif ($adata.isOne2One())
    *   @hibernate.one-to-one
#end
#foreach ( $tgv in $adata.source.taggedValues )
#if ($tgv.tag == "gentaku.persistence.SQLFKColumnName")
#set ( $foreignKeyColumn = $tgv.value )
#elseif ($tgv.tag == "gentaku.persistence.HibernateInverse")
#set ( $inverse = $tgv.value )
#end
#end
#if ( $foreignKeyColumn == "" )
#set($foreignKeyColumn = "${str.toDatabaseAttributeName(${adata.target.roleName}, $sep)}$suffix")
#end
    *       column="${foreignKeyColumn}"
    */
    public ${targettypename} get${str.upperCaseFirstLetter($adata.target.roleName)}()
    {
        return this.${adata.target.roleName};
    }

    public void set${str.upperCaseFirstLetter($adata.target.roleName)}(${targettypename} ${adata.target.roleName})
    {
        this.${adata.target.roleName} = ${adata.target.roleName};
    }

    private ${targettypename} ${adata.target.roleName};

#end


#end
#end

    // ---------------- business methods  ----------------------

#foreach ( $op in $class.operations)
#if ($transform.getStereotype($op.id) != "FinderMethod" && $transform.getStereotype($op.id) != "FilterMethod")
   /**
#generateDocumentation ($op "    ")
    *
    */
#set ($msig = $transform.getOperationSignature($op))
#set ($returntype = $transform.findFullyQualifiedName($op.getType()))
#if ($defaultException)
    $op.visibility abstract $returntype ${msig}
        throws $defaultException;
#else
    $op.visibility abstract $returntype ${msig};
#end
#end
#end

}
